call plug#begin()

" Plugins
Plug 'AndrewRadev/switch.vim'
Plug 'SirVer/ultisnips'
Plug 'Yggdroot/indentLine'
Plug 'benmills/vimux'
Plug 'cespare/vim-toml'
Plug 'chrisbra/csv.vim'
Plug 'christianrondeau/vim-base64'
Plug 'frazrepo/vim-rainbow'
Plug 'honza/vim-snippets'
Plug 'joshdick/onedark.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'pedrohdz/vim-yaml-folds'
Plug 'psf/black'
Plug 'rking/ag.vim'
Plug 'schickling/vim-bufonly'
Plug 'scrooloose/nerdtree'
Plug 'sickill/vim-monokai'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'dense-analysis/ale'

" Syntax highlighters
Plug 'ekalinin/Dockerfile.vim'
Plug 'pangloss/vim-javascript'
Plug 'smerrill/vcl-vim-plugin'
Plug 'robbles/logstash'
Plug 'lepture/vim-jinja'

call plug#end()

syntax on

" Indent Rules
filetype plugin indent on
set smartindent

" Disable indentline by default, turn it on only for yaml if you need it
let g:indentLine_enabled = 0

let g:airline#extensions#ale#enabled = 1

set termguicolors
silent! colorscheme catppuccin_mocha
" silent! colorscheme solarized

" Turn on 3 modelines, these allow us to set filetype etc using the first 3
set modeline
set modelines=3

" Change buffers without saving them
set hidden

" Shortcut for "the sudo" trick, to write the open file using sudo with `w!!`
cmap w!! w !sudo tee > /dev/null %

" Use the already open buffer if it exists
set switchbuf=useopen,usetab

" Filetype detection based on extension for lesser known filetypes
autocmd BufRead,BufNewFile *.ino set filetype=arduino
autocmd BufRead,BufNewFile *.ncx set filetype=xml
autocmd BufRead,BufNewFile *.opf set filetype=xml
autocmd BufRead,BufNewFile *.jar,*.war,*.ear,*.sar,*.rar,*.epub set filetype=zip

" babel and eslint config files are json but don't end in .json
autocmd BufRead,BufNewFile .babelrc,.eslintrc set filetype=json

" Start at the beginning of the buffer for git commit messages
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])


" Visual bell and no beep
" set vb
set noerrorbells

" Allow backspacing over everything in insert mode
set bs=indent,eol,start

" Change backup directory to not litter working directories
set backupdir=/tmp
" I have more than 8k of memory, don't need swapfile thanks
set noswapfile

" Turn on mouse support
set mouse=a

" Start without wrapping
set nowrap

" Allow j and k keys to move down physical lines on screen, eg when `set wrap`
" is set.
nnoremap j gj
nnoremap k gk
imap <silent> <Down> <C-o>gj
imap <silent> <Up> <C-o>gk
nmap <silent> <Down> gj
nmap <silent> <Up> gk

" Allow L and H to go to beginning and end of line respectively vs $ and 0
nnoremap H 0
nnoremap L $

" I have yet to find a use for Ex mode, maybe one day
nnoremap Q <Nop>

" Scroll 3 lines at a time with C-y and C-x
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Make Y and D yank til the end of the line like other capital letter commands
" tend to do.
map Y y$
map D d$

" Hide the toolbar
set go-=T

" Enable the status bar
set laststatus=2

" Keep some space between the current line and the window frame
set scrolloff=4

set sw=2 sts=2 ts=2 expandtab

" Search for the visually selected text with // in visual mode
vnoremap // y/<C-R>"<CR>

" See lines numbers, ruler, and current line
set number
set ruler
set cursorline

" set bash style word completion
set wildmode=longest:full
set wildmenu
set wildignore=*.swp,*.bak,*.pyc,*.class

" Search Options
" enable search highlighting
set hlsearch
" enable incremental search
set incsearch
" case-insensitive search
set ignorecase
set infercase
" unless there's uppercase letters on the pattern
set smartcase

" do not move the cursor when highlighting
noremap * *N
noremap # #N

" Map shortcut leader to space
let mapleader = " "

" Clear the search highlight with <leader>n
nmap <silent> <leader>n :noh<CR>

" Toggle paste mode
nmap <silent> <leader>p :set paste!<CR>

" Insert date on new line
nmap <silent> <leader>d :r!date<CR>

" Softwrap text
nmap <silent> <leader>w :set wrap! linebreak! textwidth=0<CR>

" Start Ag command using current search term
map <leader>a :AgFromSearch<CR>

" Format python code with `black`
" let g:black_virtualenv="~/.virtualenvs/black"
map <leader>b :Black<CR>

" Sort the currently selected lines
vnoremap <leader>so :sort<CR>

" NERDTree config
map <leader>t :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.pyc']
let NERDTreeShowHidden=1

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
" Opens a split command with the path of the currently edited file filled in
" Normal mode: <Leader>s
map <Leader>se :split <C-R>=expand("%:p:h") . "/" <CR>
" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>v
map <Leader>ve :vsplit <C-R>=expand("%:p:h") . "/" <CR>

set listchars=tab:>.,trail:.,extends:#,nbsp:.
set list

" When splitting window, split to bottom and to right
set splitright
set splitbelow

" Resize windows when loading sessions
set sessionoptions+=resize

" After shifting a visual block, reselect it to be able to shift again
vnoremap > >gv
vnoremap < <gv

" Run current line/selection as Python code and replace with output
nmap gp :.!python3<CR>
vmap gp :!python3<CR>

" Move between windows with ctrl + movement keys
nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-L> <C-W>l

" Split to the file under the cursor and line number with gs
" First unmap the default for switch.vim which interferes with the map below
let g:switch_mapping = ""
nmap gs <C-W>F

" Remove some of the more annoying 'Press ENTER to continue' messages
set shortmess=atI

" Automatically reload vimrc on save
autocmd! BufWritePost vimrc source %

" Remember cursor position on files
autocmd BufReadPost * normal `"

" I don't need help dammit
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Vim by default uses c-c for SQL autocomplete but I use it as escape
let g:ftplugin_sql_omni_key = '<C-0>'
" Remap C-c to escape, my fingers are there already
inoremap <C-c> <ESC>

" autocomplete on dashed-words, very useful for CSS
set iskeyword+=-

" Don't flicker when executing macros/functions
set lazyredraw

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Goyo config
function! s:goyo_enter()
  " if executable('tmux') && strlen($TMUX)
  "   silent !tmux set status off
  "   silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  " endif
  set wrap
  set linebreak
  set noshowmode
  set noshowcmd
  " set scrolloff=20
  " Limelight
endfunction

function! s:goyo_leave()
  " if executable('tmux') && strlen($TMUX)
  "   silent !tmux set status on
  "   silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  " endif
  set nowrap
  set nolinebreak
  set showmode
  set showcmd
  " set scrolloff=5
  " Limelight!
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
map <silent> <leader>g :Goyo<CR>


let g:rainbow_active = 1

" I can't let go of the shift key fast enough :(
cnoreabbrev Q q
cnoreabbrev Qa qa
cnoreabbrev Qal qa
cnoreabbrev Qall qa
cnoreabbrev W w
cnoreabbrev Wa wa
cnoreabbrev Wal wa
cnoreabbrev Wall wa
cnoreabbrev Set set

" json-vim
let g:vim_json_syntax_conceal = 0

" vim-markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'js=javascript', 'json']
